expression 'Folder Path' = "D:\high performance project\project\dataset final" meta [IsParameterQuery=true, Type="Any", IsParameterQueryRequired=true]
	lineageTag: ff0fe4ac-6dc7-4cf2-8195-dba1ca802663
	queryGroup: 'folder path'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text

expression 'Date Parameter' = ```
		let fnDateTable = (StartDate as date, EndDate as date, FYStartMonth as number) as table =>
		  let
		    DayCount = Duration.Days(Duration.From(EndDate - StartDate)),
		    Source = List.Dates(StartDate,DayCount,#duration(1,0,0,0)),
		    TableFromList = Table.FromList(Source, Splitter.SplitByNothing()),   
		    ChangedType = Table.TransformColumnTypes(TableFromList,{{"Column1", type date}}),
		    RenamedColumns = Table.RenameColumns(ChangedType,{{"Column1", "Date"}}),
		    InsertYear = Table.AddColumn(RenamedColumns, "Year", each Date.Year([Date]),type text),
		    InsertYearNumber = Table.AddColumn(RenamedColumns, "YearNumber", each Date.Year([Date])),
		    InsertQuarter = Table.AddColumn(InsertYear, "QuarterOfYear", each Date.QuarterOfYear([Date])),
		    InsertMonth = Table.AddColumn(InsertQuarter, "MonthOfYear", each Date.Month([Date]), type text),
		    InsertDay = Table.AddColumn(InsertMonth, "DayOfMonth", each Date.Day([Date])),
		    InsertDayInt = Table.AddColumn(InsertDay, "DateInt", each [Year] * 10000 + [MonthOfYear] * 100 + [DayOfMonth]),
		    InsertMonthName = Table.AddColumn(InsertDayInt, "MonthName", each Date.ToText([Date], "MMMM"), type text),
		    InsertCalendarMonth = Table.AddColumn(InsertMonthName, "MonthInCalendar", each (try(Text.Range([MonthName],0,3)) otherwise [MonthName]) & " " & Number.ToText([Year])),
		    InsertCalendarQtr = Table.AddColumn(InsertCalendarMonth, "QuarterInCalendar", each "Q" & Number.ToText([QuarterOfYear]) & " " & Number.ToText([Year])),
		    InsertDayWeek = Table.AddColumn(InsertCalendarQtr, "DayInWeek", each if Date.DayOfWeek([Date], Day.Sunday) = 0 then 7 else Date.DayOfWeek([Date], Day.Sunday)),
		    InsertDayName = Table.AddColumn(InsertDayWeek, "DayOfWeekName", each Date.ToText([Date], "dddd"), type text),
		    InsertWeekEnding = Table.AddColumn(InsertDayName, "WeekEnding", each Date.EndOfWeek([Date]), type date),
		    InsertWeekNumber= Table.AddColumn(InsertWeekEnding, "Week Number", each Date.WeekOfYear([Date])),
		    InsertMonthnYear = Table.AddColumn(InsertWeekNumber,"MonthnYear", each [Year] * 10000 + [MonthOfYear] * 100),
		    InsertQuarternYear = Table.AddColumn(InsertMonthnYear,"QuarternYear", each [Year] * 10000 + [QuarterOfYear] * 100),
		    ChangedType1 = Table.TransformColumnTypes(InsertQuarternYear,{{"QuarternYear", Int64.Type},{"Week Number", Int64.Type},{"Year", type text},{"MonthnYear", Int64.Type}, {"DateInt", Int64.Type}, {"DayOfMonth", Int64.Type}, {"MonthOfYear", Int64.Type}, {"QuarterOfYear", Int64.Type}, {"MonthInCalendar", type text}, {"QuarterInCalendar", type text}, {"DayInWeek", Int64.Type}}),
		    InsertShortYear = Table.AddColumn(ChangedType1, "ShortYear", each Text.End(Text.From([Year]), 2), type text),
		    AddFY = Table.AddColumn(InsertShortYear, "FY", each "FY"&(if [MonthOfYear]>=FYStartMonth then Text.From(Number.From([ShortYear])+1) else [ShortYear]))
		in
		    AddFY
		in
		    fnDateTable
		```
	lineageTag: e21b802f-ebb0-4e1b-bfe7-a420489eef4a
	queryGroup: Calender

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

